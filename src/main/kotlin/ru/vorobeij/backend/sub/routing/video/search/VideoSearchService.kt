package ru.vorobeij.backend.sub.routing.video.search

import kotlinx.coroutines.Deferred
import org.jetbrains.exposed.sql.ResultRow
import org.jetbrains.exposed.sql.select
import org.jetbrains.exposed.sql.transactions.experimental.suspendedTransactionAsync
import ru.vorobeij.backend.sub.database.DatabaseProvider
import ru.vorobeij.backend.sub.database.tables.YouTubeVideos
import ru.vorobeij.backend.sub.routing.video.data.YouTubeVideoDto
import ru.vorobeij.backend.sub.routing.video.search.data.VideoSearchRequest
import ru.vorobeij.backend.sub.routing.video.search.data.VideoSearchResponseBody

class VideoSearchService(
    private val databaseProvider: DatabaseProvider
) {

    suspend fun search(body: VideoSearchRequest): Deferred<VideoSearchResponseBody> = suspendedTransactionAsync(db = databaseProvider.database) {
        val videos = YouTubeVideos
            .select { YouTubeVideos.language eq body.filters.language }
            .map(ResultRow::youTubeVideo)

        VideoSearchResponseBody(
            videos = videos,
            page = 0
        )
    }
}

fun ResultRow.youTubeVideo(): YouTubeVideoDto = YouTubeVideoDto(
    id = this[YouTubeVideos.id],
    title = this[YouTubeVideos.title],
    description = this[YouTubeVideos.description],
    channelTitle = this[YouTubeVideos.channelTitle],
    subsUriString = this[YouTubeVideos.subsUriString],
    previewUrl = this[YouTubeVideos.previewUrl],
    channelId = this[YouTubeVideos.channelId],
    sourceLang = this[YouTubeVideos.sourceLang],
    durationMs = this[YouTubeVideos.durationMs],
    openedAtTs = this[YouTubeVideos.openedAtTs],
    publishedAtTs = this[YouTubeVideos.publishedAtTs],
    difficulty = this[YouTubeVideos.difficulty],
    autogeneratedSubtitles = this[YouTubeVideos.autogeneratedSubtitles],
    banned = this[YouTubeVideos.banned],
    reportedTimes = 0,
    requiresModeration = this[YouTubeVideos.requiresModeration],
    seekPositionPercent = 0.0f
)
